set 1:
1...........

% Define distances between cities
distance(new_york, los_angeles, 2799).
distance(new_york, chicago, 787).
distance(los_angeles, chicago, 2015).
distance(los_angeles, san_francisco, 381).
distance(chicago, san_francisco, 2139).
distance(chicago, dallas, 802).
distance(san_francisco, seattle, 808).
distance(dallas, seattle, 2089).

% Define transportation modes and their speeds (mph)
transportation_mode(car, 60).
transportation_mode(train, 50).
transportation_mode(plane, 500).

% Calculate travel time between cities
travel_time(From, To, Mode, Time) :-
    distance(From, To, Distance),
    transportation_mode(Mode, Speed),
    Time is Distance / Speed.

% Find optimal route and transportation mode
plan_trip(From, To, Mode, Time) :-
    transportation_mode(Mode, _), % Ensure mode is valid
    travel_time(From, To, Mode, Time),
    \+ (transportation_mode(OtherMode, _),
        OtherMode \= Mode,
        travel_time(From, To, OtherMode, OtherTime),
        OtherTime < Time).

% Example usage:
% plan_trip(new_york, san_francisco, Mode, Time).

2................
% Define fuzzy output values and their membership functions
fuzzy_output(low, [0, 0, 30, 60]).
fuzzy_output(medium, [40, 70, 100]).
fuzzy_output(high, [80, 100, 100, 100]).

% Define fuzzy output values and their centroids
centroid(low, 20).
centroid(medium, 70).
centroid(high, 95).

% Calculate crisp control signal using COG method
defuzzify(CrispControl) :-
    fuzzy_output(Output, Membership),
    centroid(Output, Centroid),
    area_weighted_sum(Membership, Centroid, Sum),
    sum_of_membership(Membership, SumOfMembership),
    CrispControl is Sum / SumOfMembership.

% Calculate area weighted sum
area_weighted_sum([X1, X2|Xs], Centroid, Sum) :-
    area_weighted_sum([X2|Xs], Centroid, RestSum),
    Sum is (X1 + X2) / 2 * (Centroid - X1) + RestSum.
area_weighted_sum([_], _, 0).

% Calculate sum of membership
sum_of_membership([], 0).
sum_of_membership([X|Xs], Sum) :-
    sum_of_membership(Xs, RestSum),
    Sum is X + RestSum.









______________________________________________________________________________

Set-2:

1)

% Define tasks and their durations
task_duration(task1, 3).
task_duration(task2, 2).
task_duration(task3, 4).
task_duration(task4, 1).

% Define resources and their availability
resource(avail_resource1, 5).
resource(avail_resource2, 3).
resource(avail_resource3, 4).

% Define dependencies between tasks
dependency(task2, task1).
dependency(task3, task1).
dependency(task4, task2).
dependency(task4, task3).

% Define predicate to schedule tasks
schedule_tasks(TaskList, Schedule) :-
    findall(Task, task_duration(Task, _), AllTasks),
    schedule_tasks_helper(AllTasks, [], TaskList),
    optimize_schedule(TaskList, Schedule).

% Helper predicate to generate task schedule
schedule_tasks_helper([], Acc, Acc).
schedule_tasks_helper([Task|Rest], Acc, TaskList) :-
    findall(DepTask, (dependency(Task, DepTask), member(DepTask, Acc)), DepTasks),
    schedule_tasks_helper(Rest, [Task|Acc], TaskList),
    append(DepTasks, Acc, NewAcc),
    schedule_tasks_helper(Rest, NewAcc, TaskList).

% Predicate to optimize the schedule
optimize_schedule(TaskList, OptimalSchedule) :-
    % Define optimization criteria here (e.g., minimize total duration)
    % Example: OptimalSchedule = TaskList.
    OptimalSchedule = TaskList. % For now, just return the same schedule

% Example usage:
% schedule_tasks([], Schedule).


% Example usage:
% defuzzify(CrispControl).



.................................................

2)

import nltk
from nltk.tokenize import word_tokenize

# Sample text
sample_text = "Prolog programming is fun and challenging."

# Tokenize the sentence
tokens = word_tokenize(sample_text)

# Print the tokens
print("Tokens:", tokens)

