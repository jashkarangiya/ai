1st set:
1:

% Define the activities for different weather conditions
activities(sunny, [hiking, picnicking, cycling, gardening]).
activities(rainy, [reading, indoor games, cooking, movie-watching]).
activities(cloudy, [walking, photography, birdwatching, visiting museum]).
activities(snowy, [skiing, snowboarding, building a snowman, drinking hot cocoa]).

% Define the rules for recommending activities based on the weather
recommend_activity(Weather) :-
    activities(Weather, Activities),
    write('Recommended activities for '), write(Weather), write(':'), nl,
    write_activities(Activities).

% Helper predicate to print the list of activities
write_activities([]).
write_activities([Activity|Rest]) :-
    write('- '), write(Activity), nl,
    write_activities(Rest).

% Example query: recommend activities for a specific weather condition
% To use this, simply query recommend_activity with the weather condition
% For example: recommend_activity(sunny).

2:
% Define prerequisite rules
prerequisite(cs101, []).
prerequisite(cs102, [cs101]).
prerequisite(cs201, [cs101, cs102]).
prerequisite(cs202, [cs101, cs102]).
prerequisite(cs301, [cs201, cs202]).

% Define dynamic predicates for student registration
:- dynamic enrolled/2.

% Register a student for a course
register(Student, Course) :-
    \+ enrolled(Student, Course),
    can_register(Student, Course),
    assert(enrolled(Student, Course)),
    format('Student ~w has registered for course ~w.~n', [Student, Course]).

% Drop a course for a student
drop(Student, Course) :-
    retract(enrolled(Student, Course)),
    format('Student ~w has dropped course ~w.~n', [Student, Course]).

% Check if a student can register for a course
can_register(Student, Course) :-
    prerequisite(Course, Prerequisites),
    forall(member(Prereq, Prerequisites), enrolled(Student, Prereq)).

% Query current course enrolment for a student
current_enrolment(Student) :-
    findall(Course, enrolled(Student, Course), EnrolledCourses),
    format('Student ~w is currently enrolled in: ~w~n', [Student, EnrolledCourses]).

% Example usage:
% register(john, cs101).
% register(john, cs102).
% drop(john, cs102).
% register(john, cs201).
% current_enrolment(john).









## Set- 2:>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1)
import nltk
from nltk import ne_chunk
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag

# Sample text
sample_text = """
SpaceX is an aerospace manufacturer and space transport services company headquartered in Hawthorne, California. 
It was founded by Elon Musk in 2002. 
The company designs, manufactures, and launches advanced rockets and spacecraft. 
Some of its notable achievements include the development of the Falcon 9 and Falcon Heavy rockets, 
as well as the Dragon spacecraft used for cargo resupply missions to the International Space Station.
"""

# Tokenize the text into words
words = word_tokenize(sample_text)

# Perform part-of-speech tagging
tagged_words = pos_tag(words)

# Perform named entity recognition
named_entities = ne_chunk(tagged_words)

# Function to extract named entities from the named entity tree
def extract_entities(tree):
    entities = []
    if hasattr(tree, 'label') and tree.label():
        if tree.label() == 'NE':
            entities.append(' '.join([child[0] for child in tree]))
        else:
            for child in tree:
                entities.extend(extract_entities(child))
    return entities

# Extract named entities
named_entities_list = extract_entities(named_entities)

# Classify named entities into categories
person_names = []
locations = []
organizations = []

for entity in named_entities_list:
    if 'PERSON' in nltk.pos_tag([entity])[0][1]:
        person_names.append(entity)
    elif 'GPE' in nltk.pos_tag([entity])[0][1]:  # GPE: geopolitical entity
        locations.append(entity)
    elif 'ORGANIZATION' in nltk.pos_tag([entity])[0][1]:
        organizations.append(entity)

# Print the classified named entities
print("Person Names:", person_names)
print("Locations:", locations)
print("Organizations:", organizations)


---------------------------------------------

Alternative

1) 
import nltk
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')
# Sample text
sample_text = '''SpaceX is an aerospace manufacturer and space transport services company headquartered in Hawthorne, California. It was founded by Elon Musk in 2002. The company designs, manufactures, and launches advanced rockets and spacecraft. Some of its notable achievements include the development of the Falcon 9 and Falcon Heavy rockets, as well as the Dragon spacecraft used for cargo resupply missions to the International Space Station.'''

# Tokenize the text into sentences
sentences = nltk.sent_tokenize(sample_text)

# Apply NER to each sentence
for sentence in sentences:
    words = nltk.word_tokenize(sentence)
    tagged_words = nltk.pos_tag(words)
    entities = nltk.chunk.ne_chunk(tagged_words)
    
    # Print named entities and their categories
    for entity in entities:
        if isinstance(entity, nltk.tree.Tree):
            if entity.label() == 'PERSON':
                print(f"Person: {' '.join([leaf[0] for leaf in entity.leaves()])}")
            elif entity.label() == 'GPE':
                print(f"Location: {' '.join([leaf[0] for leaf in entity.leaves()])}")
            elif entity.label() == 'ORGANIZATION':
                print(f"Organization: {' '.join([leaf[0] for leaf in entity.leaves()])}")


_____________________________________________________________________________________________________



2)

import nltk
from nltk.tokenize import word_tokenize

# Sample text
sample_text = "Natural language processing (NLP) is a subfield of artificial intelligence (AI) that focuses on the interaction between computers and humans through natural language."

# Tokenize the sentence
tokens = word_tokenize(sample_text)

# Print the tokens
print("Tokens:", tokens)
